local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

task.wait(5.75)

local PlaceId = game.PlaceId
local JobId = game.JobId
local WebhookURL = "https://discord.com/api/webhooks/1367992741375643721/CITgXfhkeFZC4Q1k832QIPbAj3_rM4Tl81ZqR-u164g5ccZCsC00UA7uLItyJKR0Cs9J" -- Replace with your actual webhook URL

local requestFunc = (syn and syn.request) or http_request or request or (fluxus and fluxus.request) or httprequest

local function sendWebhook(message)
	if not requestFunc then
		warn("No supported HTTP request function found.")
		return
	end

	requestFunc({
		Url = WebhookURL,
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json"
		},
		Body = HttpService:JSONEncode({ content = message })
	})
end

local function hopToNewServer()
	if not requestFunc then
		warn("Incompatible exploit: missing HTTP request function")
		return
	end

	local servers = {}
	local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)
	local success, result = pcall(function()
		return requestFunc({ Url = url })
	end)

	if success and result and result.Body then
		local body = HttpService:JSONDecode(result.Body)
		if body and body.data then
			for _, v in next, body.data do
				local playing = tonumber(v.playing)
				local maxPlayers = tonumber(v.maxPlayers)
				local serverId = v.id
				if playing and maxPlayers and serverId and serverId ~= JobId and playing < maxPlayers then
					table.insert(servers, serverId)
				end
			end
		end
	end

	if #servers > 0 then
		local targetServer = servers[math.random(1, #servers)]
		TeleportService:TeleportToPlaceInstance(PlaceId, targetServer, LocalPlayer)
		return true -- Successfully teleporting to a server
	else
		warn("No suitable servers found (max players not exceeded).")
		return false
	end
end

local rifts = workspace:FindFirstChild("Rendered")
	and workspace.Rendered:FindFirstChild("Rifts")

local sillyEgg = rifts and rifts:FindFirstChild("silly-egg")

if sillyEgg then
	-- Ping everyone in the Discord server when the silly-egg is found
	local message = "@everyone ü™∫ silly-egg found!\nPlaceId: " .. PlaceId .. "\nJobId: " .. JobId
	sendWebhook(message)
else
	local childNames = "‚ùå silly-egg NOT found.\nPlaceId: " .. PlaceId .. "\nJobId: " .. JobId .. "\nRifts Children:\n"
	if rifts then
		for _, child in ipairs(rifts:GetChildren()) do
			childNames = childNames .. "- " .. child.Name .. "\n"
		end
	else
		childNames = childNames .. "(Rifts folder missing)"
	end

	sendWebhook(childNames)

	-- Retry logic for full server (click "OK" on the prompt)
	while true do
		local success = hopToNewServer()
		if success then
			-- Wait for 5 seconds before retrying if the server is full or we didn't find a server
			task.wait(5)
		else
			-- Check for "Requested experience full" message and simulate OK click
			if syn and syn.protect_gui then
				-- Assuming a method like syn.protect_gui exists in your environment, or other exploits allow interaction
				local prompt = game:GetService("CoreGui"):FindFirstChild("ErrorPrompt")
				if prompt and prompt:IsA("Frame") then
					local okButton = prompt:FindFirstChild("OK")
					if okButton then
						-- Simulate click on the OK button to dismiss the prompt
						okButton.MouseButton1Click:Fire()
						print("Clicked OK on 'Requested experience full' prompt.")
						task.wait(1) -- Wait a bit to allow the dialog to close
					end
				end
			end
			-- Try again after handling the dialog
			task.wait(2)
		end
	end
end
